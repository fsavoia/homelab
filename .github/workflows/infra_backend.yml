name: Create Backend Infra on OCI
on:
  workflow_dispatch:

env:
  BUCKET_NAME: ${{ secrets.BUCKET_NAME }}

jobs:
  Infra_Backend-Deployment:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: terraform/oracle/infra_backend
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Write Config & Key Files"
        run: |
          mkdir ~/.oci
          mkdir ~/.aws
          echo "[DEFAULT]" >> ~/.oci/config
          echo "user=${{secrets.OCI_USER_OCID}}" >> ~/.oci/config
          echo "fingerprint=${{secrets.OCI_FINGERPRINT}}" >> ~/.oci/config
          echo "region=${{secrets.OCI_REGION}}" >> ~/.oci/config
          echo "tenancy=${{secrets.OCI_TENANCY_OCID}}" >> ~/.oci/config
          echo "key_file=~/.oci/key.pem" >> ~/.oci/config
          echo "${{secrets.OCI_KEY_FILE}}" >> ~/.oci/key.pem
          echo "[default]" >> ~/.aws/credentials
          echo "aws_access_key_id=${{secrets.AWS_ACCESS_KEY_ID}}" >> ~/.aws/credentials
          echo "aws_secret_access_key=${{secrets.AWS_SECRET_ACCESS_KEY}}" >> ~/.aws/credentials

      - name: "Install OCI CLI"
        run: |
          curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          chmod +x install.sh
          ./install.sh --accept-all-defaults
          echo "/home/runner/bin" >> $GITHUB_PATH
          exec -l $SHELL

      - name: "Fix OCI Config File Permissions"
        run: |
          oci setup repair-file-permissions --file /home/runner/.oci/config
          oci setup repair-file-permissions --file /home/runner/.oci/key.pem

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.10.5

      - name: Terraform Init
        id: init
        run: |
          terraform init \
            -backend-config="bucket=$BUCKET_NAME" \
            -backend-config='endpoints={s3="${{ secrets.NAMESPACE }}"}'

      - name: Terraform format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Setup Dynamic Sensitve Variables
        run: |
          echo "TF_VAR_namespace=${{ secrets.NAMESPACE }}" >> $GITHUB_ENV
          echo "TF_VAR_compartment_id=${{ secrets.COMPARTMENT_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_bucket_name=$BUCKET_NAME" >> $GITHUB_ENV

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -input=false -out=tfplan || echo "PLAN_FAILED=true" >> $GITHUB_ENV
        continue-on-error: true

      - name: Terraform Plan Status
        if: env.PLAN_FAILED == 'true'
        run: exit 1

      - name: Terraform Apply
        run: terraform apply -input=false -auto-approve tfplan
